// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

// Note -> Uncomment when using with postgresql
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }
// using mysql local for testing !
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  IN
  OUT
  CREDITED
  DEBITED
}

enum QualityStatus {
  GOOD
  AVERAGE
  POOR
}

enum Status {
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum Roles {
  ADMIN
  EMPLOYEE
}

enum Actions {
  INSERT
  UPDATE
  DELETE
}

// As a base code pk has been set to autoincrement by default . Pls change if required
model RAW_MATERIALS {
  id               BigInt                          @id
  name             String
  SKU              String
  quantity         Int
  price            Decimal
  image            String?
  description      String?
  expiry_date      DateTime
  quality_status   QualityStatus
  storage_location String
  createdAt        DateTime                        @default(now())
  updatedAt        DateTime                        @updatedAt
  deletedAt        DateTime?
  VariantMaterials VARIANT_RAW_MATERIALS_TRACKER[]
  RMTransactions   RM_TRANSACTIONS[]
  RMQualityChecks  RM_QC[]
  RMWastageLogs    RM_WASTAGE_LOGS[]
  WIPMaterials     WIPRawMaterial[]

  @@index([SKU])
}

// added variantName and variantOption for better understanding and implementing logic for max variant combo customization
// and filtration
model SHOPIFY_VARIANTS {
  id               BigInt                          @id
  productId        BigInt
  name             String
  AvailableQty     Int
  img              String?
  createdAt        DateTime                        @default(now())
  updatedAt        DateTime                        @updatedAt
  deletedAt        DateTime?
  product          SHOPIFY_PRODUCTS                @relation(fields: [productId], references: [id], onDelete: Cascade)
  VariantMaterials VARIANT_RAW_MATERIALS_TRACKER[]
  variantName      String?
  variantOption    String?
}

model VARIANT_RAW_MATERIALS_TRACKER {
  variantId     BigInt
  rawMaterialId BigInt
  avgQuantity   Decimal
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  deletedAt     DateTime?
  variant       SHOPIFY_VARIANTS @relation(fields: [variantId], references: [id], onDelete: Cascade)
  rawMaterial   RAW_MATERIALS    @relation(fields: [rawMaterialId], references: [id], onDelete: Cascade)

  @@id([variantId, rawMaterialId]) // Composite primary key
}

model CATEGORIES {
  id              Int                @id
  name            String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  ShopifyProducts SHOPIFY_PRODUCTS[]
}

model SHOPIFY_PRODUCTS {
  id              BigInt             @id
  name            String
  categoryId      Int
  category        CATEGORIES         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  price           Decimal
  status          String?
  img             String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  ShopifyVariants SHOPIFY_VARIANTS[]
  WIPProducts     WIP_PRODUCTS[]
}

model RM_TRANSACTIONS {
  id              Int               @id @default(autoincrement())
  rawMaterialId   BigInt
  quantity        Int
  transactionType TransactionType // e.g., "in", "out", "credited", "debited"
  reason          String
  status          String
  initiatedById   Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  rawMaterial     RAW_MATERIALS     @relation(fields: [rawMaterialId], references: [id], onDelete: Cascade)
  initiatedBy     Employee          @relation(fields: [initiatedById], references: [id], onDelete: Cascade)
  RMQualityChecks RM_QC[]
  RMWastageLogs   RM_WASTAGE_LOGS[]

  @@index([status])
  @@index([transactionType, createdAt])
}

model RM_QC {
  id             Int             @id @default(autoincrement())
  transactionId  Int
  rawMaterialId  BigInt
  quality_status QualityStatus
  checkedById    Int
  doneById       Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  rawMaterial    RAW_MATERIALS   @relation(fields: [rawMaterialId], references: [id], onDelete: Cascade)
  transaction    RM_TRANSACTIONS @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  checkedBy      Employee        @relation("CheckedByEmployee", fields: [checkedById], references: [id], onDelete: Cascade)
  doneBy         Employee        @relation("DoneByEmployee", fields: [doneById], references: [id], onDelete: Cascade)
}

model RM_WASTAGE_LOGS {
  id            Int             @id @default(autoincrement())
  transactionId Int
  rawMaterialId BigInt
  quantity      Int
  reason        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  rawMaterial   RAW_MATERIALS   @relation(fields: [rawMaterialId], references: [id], onDelete: Cascade)
  transaction   RM_TRANSACTIONS @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Employee {
  id              Int                @id @default(autoincrement())
  name            String
  role            Roles
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  deletedAt       DateTime?
  RM_QC           RM_QC[]            @relation("CheckedByEmployee")
  RM_QC2          RM_QC[]            @relation("DoneByEmployee")
  RMTransactions  RM_TRANSACTIONS[]
  WIPTransactions WIP_TRANSACTIONS[]
  FGTransactions  FG_TRANSACTIONS[]
  AuditLogs       AuditLogs[]
}

model WIP {
  id              Int                @id @default(autoincrement())
  orderId         Int
  status          Status
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  WIPTransactions WIP_TRANSACTIONS[]
  WIPQCs          WIP_QC[]
  WIPWastageLogs  WIP_WASTAGE_LOGS[]
  wipProducts     WIP_PRODUCTS[]
  WIPMaterials    WIPRawMaterial[]
}

model WIP_PRODUCTS {
  id        Int              @id @default(autoincrement())
  wipId     Int
  productId BigInt
  quantity  Int
  wip       WIP              @relation(fields: [wipId], references: [id])
  product   SHOPIFY_PRODUCTS @relation(fields: [productId], references: [id])
}

model WIPRawMaterial {
  id            Int           @id @default(autoincrement())
  wipId         Int
  rawMaterialId BigInt
  quantity      Int
  wip           WIP           @relation(fields: [wipId], references: [id])
  rawMaterial   RAW_MATERIALS @relation(fields: [rawMaterialId], references: [id])
}

model FG {
  id             Int               @id @default(autoincrement())
  orderId        Int
  customerName   String
  price          Decimal
  status         Status
  createdAt      DateTime          @default(now())
  deliveryDate   DateTime
  FGTransactions FG_TRANSACTIONS[]
  FGQCs          FG_QC[]
  FGWastageLogs  FG_WASTAGE_LOGS[]
  fgProducts     FG_PRODUCTS[]
}

model FG_PRODUCTS {
  id        Int @id @default(autoincrement())
  fgId      Int
  productId Int
  quantity  Int
  fg        FG  @relation(fields: [fgId], references: [id])
}

model WIP_TRANSACTIONS {
  id              Int                @id @default(autoincrement())
  wipId           Int
  quantity        Int
  transactionType TransactionType // e.g., in, out, credited, debited
  reason          String
  status          Status
  initiatedById   Int
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  wip             WIP                @relation(fields: [wipId], references: [id], onDelete: Cascade)
  initiatedBy     Employee           @relation(fields: [initiatedById], references: [id], onDelete: Cascade)
  wipQC           WIP_QC[]
  wipWasteLogs    WIP_WASTAGE_LOGS[]

  @@index([status])
  @@index([transactionType, createdAt])
}

model FG_TRANSACTIONS {
  id              Int               @id @default(autoincrement())
  fgId            Int
  quantity        Int
  transactionType TransactionType // e.g., in, out, credited, debited
  status          Status
  reason          String
  IntiatedById    Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  fg              FG                @relation(fields: [fgId], references: [id], onDelete: Cascade)
  initiatedBy     Employee          @relation(fields: [IntiatedById], references: [id], onDelete: Cascade)
  fgQC            FG_QC[]
  fgWasteLogs     FG_WASTAGE_LOGS[]

  @@index([status])
  @@index([transactionType, createdAt])
}

model WIP_QC {
  id              Int              @id @default(autoincrement())
  transactionId   Int
  transactionType TransactionType
  wipId           Int
  quality_status  QualityStatus
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  wip             WIP              @relation(fields: [wipId], references: [id], onDelete: Cascade)
  WIPTransactions WIP_TRANSACTIONS @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model FG_QC {
  id              Int             @id @default(autoincrement())
  transactionId   Int
  transactionType TransactionType
  fgId            Int
  quality_status  QualityStatus
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  fg              FG              @relation(fields: [fgId], references: [id], onDelete: Cascade)
  FGTransactions  FG_TRANSACTIONS @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model WIP_WASTAGE_LOGS {
  id              Int              @id @default(autoincrement())
  transactionId   Int
  transactionType TransactionType
  wipId           Int
  quantity        Int
  reason          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  wip             WIP              @relation(fields: [wipId], references: [id], onDelete: Cascade)
  WIPTransactions WIP_TRANSACTIONS @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model FG_WASTAGE_LOGS {
  id              Int             @id @default(autoincrement())
  transactionId   Int
  transactionType TransactionType
  fgId            Int
  quantity        Int
  reason          String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  fg              FG              @relation(fields: [fgId], references: [id], onDelete: Cascade)
  FGTransactions  FG_TRANSACTIONS @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model AuditLogs {
  id          Int      @id @default(autoincrement())
  tableName   String
  action      Actions
  oldValue    Json?
  newValue    Json?
  changedById Int
  changedBy   Employee @relation(fields: [changedById], references: [id])
  createdAt   DateTime @default(now())
}
